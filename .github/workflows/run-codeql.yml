name: CodeQL

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to current directory).
        type: string
        default: .
      configure-args:
        description: Extra arguments for CMake configure.
        type: string
      build-args:
        description: Extra arguments for CMake build.
        type: string
      codeql-config-file:
        description: Config file for CodeQL (optional).
        type: string
      codeql-queries:
        description: CodeQL queries to run (optional, defaults to security-and-quality for non-pull-requests if no config file is provided).
        type: string
        default: ${{inputs.codeql-config-file && github.event_name != 'pull-request' && 'security-and-quality' || ''}}

permissions: {}

concurrency: 
  group: run-codeql-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
      packages: write
      security-events: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Actions: Load'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter -o "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$GITHUB_WORKFLOW_SHA"
        mkdir cmake-utils
        tar -x $([[ $RUNNER_DEBUG == 1 ]] && echo -- "-v") -f "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --exclude='*.md' --wildcards \
            '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake'

    - name: 'Actions: Cache'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.sha}}
        restore-keys: cmu-source-

    - name: 'Source: Checkout'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Remove Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true' && steps.source-restore.outputs.cache-matched-key != ''}}
      shell: bash
      env:
        SOURCE_CACHE_KEY: ${{steps.source-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$SOURCE_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'Source: Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Environment: Load
    - name: 'vcpkg: Hashes'
      id: state
      shell: bash
      working-directory: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
      run: |
        ((echo "image-os=$ImageOs") & (echo "image-version=$ImageVersion")) >> $GITHUB_OUTPUT
        if [[ -f vcpkg.json ]]; then
          registries=$(jq --sort-keys $([[ -f vcpkg-configuration.json ]] && echo '--slurp') '.' vcpkg.json $([[ -f vcpkg-configuration.json ]] && echo 'vcpkg-configuration.json') \
            | tee >((echo -n 'manifest-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT) \
            | jq '
                [
                  .. | ((."default-registry"? | objects), (.registries? | .[]?))
                  | select(.kind == "git")
                  | { repository, reference, baseline }
                  | del(.. | nulls)  
                ] | sort')
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "$registries" || true
          if [[ $registries != '[]' ]]; then
            (echo -n 'registries-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT
          fi
        fi
 
    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}

    - name: 'vcpkg Registries: Restore'
      id: vcpkg-registries-restore
      if: ${{steps.state.outputs.registries-hash != ''}}
      uses: actions/cache/restore@v3
      with:
        path: vcpkg-registries
        key: cmu-vcpkg-registries-${{steps.state.outputs.registries-hash}}
        restore-keys: cmu-vcpkg-registries-

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      if: ${{steps.state.outputs.manifest-hash != ''}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{steps.state.outputs.manifest-hash}}
        restore-keys: cmu-vcpkg_installed-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-hash=${{hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.stamp
        if [[ -f cmake-utils/.msvc.env ]]; then
          cat cmake-utils/.msvc.env >> $GITHUB_ENV 
          echo "msvc-restored=true" >> $GITHUB_OUTPUT
        fi

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: ${{steps.tools-state.outputs.msvc-restored != 'true'}}
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}
        binary-dir: build
        generator: Ninja
        configuration: Release
        extra-args: -D "CMU_DISABLE_DEBUG_INFORMATION:BOOL=ON" -D "CMU_DISABLE_CLANG_TOOLS:BOOL=ON" ${{inputs.configure-args}}

    # Build Environment: Cache
    - name: 'Tools: Check for Updates'
      id: tools-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.tools-restore.outputs.cache-matched-key != ''}}
      shell: bash
      env:
        TOOLS_CACHE_KEY: ${{steps.tools-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ cmake-utils/.msvc.env -nt cmake-utils/.stamp \
              || -d vcpkg-downloads/tools \
                 && $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer cmake-utils/.stamp -printf "1" -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$TOOLS_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'Tools: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Registries: Check for Updates'
      id: vcpkg-registries-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outputs.cache-hit == 'true'}}
      shell: bash
      env:
        VCPKG_REGISTRIES_CACHE_KEY: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ $(find vcpkg-registries -type f -newer cmake-utils/.stamp -printf '1' -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$VCPKG_REGISTRIES_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'vcpkg Registries: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outcome != 'skipped' && (steps.vcpkg-registries-restore.outputs.cache-hit != 'true' || steps.vcpkg-registries-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: vcpkg-registries
        key: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Packages: Check for Updates'
      id: vcpkg-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.vcpkg-restore.outputs.cache-hit == 'true' && steps.tools-state.outputs.vcpkg-hash != hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        VCPKG_CACHE_KEY: ${{steps.vcpkg-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer cmake-utils/.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$VCPKG_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'vcpkg Packages: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.vcpkg-restore.outputs.cache-hit != 'true' || steps.vcpkg-check.outcome == 'success')}}
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    # CodeQL: Setup
    - name: 'CodeQL: Initialize'
      if: ${{github.event_name != 'pull_request'}}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        config-file: ${{inputs.codeql-config-file}}
        queries: ${{inputs.codeql-queries}}
        source-root: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}

    - name: 'CodeQL: Initialize for Pull Request'
      if: ${{github.event_name == 'pull_request'}}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        config-file: ${{inputs.codeql-config-file}}
        queries: ${{inputs.codeql-queries}}
        source-root: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}

    # Build
    - name: Build
      shell: cmd
      working-directory: build
      env:
        INPUT_BUILD_ARGS: ${{inputs.build-args}}
      run: cmake --build . %INPUT_BUILD_ARGS%


    # CodeQL: Analyze
    - name: 'CodeQL: Analyze'
      uses: github/codeql-action/analyze@v2
      with:
        checkout_path: ${{github.workspace}}/source

    # Logs
    - name: Save Logs
      if: ${{always() && steps.configure.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: CodeQL-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler
        if-no-files-found: ignore
