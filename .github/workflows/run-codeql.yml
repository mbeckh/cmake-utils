name: CodeQL

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to current directory).
        type: string
        default: .
      configure-args:
        description: Extra arguments for CMake configure.
        type: string
      build-args:
        description: Extra arguments for CMake build.
        type: string

permissions: {}

concurrency: 
  group: run-codeql-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
      packages: write
      security-events: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Actions: Load'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter --create-dirs -o "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$GITHUB_WORKFLOW_SHA"
        tar -x -v -f "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --anchored --wildcards --no-wildcards-match-slash \
            '*/.github/actions' '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake'

    - name: 'Actions: Cache'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.ref}}-${{github.sha}}
        restore-keys: |
          cmu-source-${{github.ref}}-
          cmu-source-

    - name: 'Source: Checkout'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Remove Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true' && startsWith(steps.source-restore.outputs.cache-matched-key, format('cmu-source-{0}-', github.ref)}}
      shell: bash
      env:
        SOURCE_CACHE_KEY: ${{steps.project-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$SOURCE_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'Source: Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Environment: Load
    - name: Image Version
      id: image
      shell: cmd
      run: ((echo os=%ImageOs%) & (echo version=%ImageVersion%)) >> %GITHUB_OUTPUT%

    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.image.outputs.os}}-${{steps.image.outputs.version}}

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: >
          cmu-vcpkg_installed-${{hashFiles(
            format('source{0}{1}/vcpkg.json',
              inputs.source-dir != '.' && inputs.source-dir && '/' || '',
              inputs.source-dir != '.' && inputs.source-dir || '',
            ),
            format('source{0}{1}/vcpkg-configuration.json',
              inputs.source-dir != '.' && inputs.source-dir && '/' || '',
              inputs.source-dir != '.' && inputs.source-dir || ''
            ))}}
        restore-keys: cmu-vcpkg_installed-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-hash=${{hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.tools.stamp
        [[ -f cmake-utils/.msvc.env ]] \
          && (cat cmake-utils/.msvc.env >> $GITHUB_ENV) \
          && (echo "msvc-restored=true" >> $GITHUB_OUTPUT)

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: ${{steps.tools-state.outputs.msvc-restored != 'true'}}
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}
        binary-dir: build
        generator: Ninja
        configuration: Release
        extra-args: -D "CMU_DISABLE_DEBUG_INFORMATION:BOOL=ON" -D "CMU_DISABLE_CLANG_TOOLS:BOOL=ON" ${{inputs.configure-args}}

    # Build Environment: Cache
    - name: 'Tools: Check for Updates'
      id: tools-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.tools-restore.outputs.cache-matched-key != ''}}
      shell: bash
      env:
        TOOLS_CACHE_KEY: ${{steps.tools-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ cmake-utils/.msvc.env -nt cmake-utils/.tools.stamp \
              || -d vcpkg-downloads/tools \
                 && $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer cmake-utils/.tools.stamp -printf "1" -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$TOOLS_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'Tools: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Packages: Check for Updates'
      id: vcpkg-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.vcpkg-restore.outputs.cache-hit == 'true' && steps.tools-state.outputs.vcpkg-hash != hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        VCPKG_CACHE_KEY: ${{steps.vcpkg-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer cmake-utils/.tools.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$VCPKG_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'vcpkg Packages: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.vcpkg-restore.outputs.cache-hit != 'true' || steps.vcpkg-check.outcome == 'success')}}
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    # CodeQL: Setup
    - name: 'CodeQL: Initialize'
      if: ${{github.event_name != 'pull_request'}}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        queries: security-and-quality
        source-root: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}

    - name: 'CodeQL: Initialize for Pull Request'
      if: ${{github.event_name == 'pull_request'}}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        source-root: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}

    # Build
    - name: Build
      shell: cmd
      working-directory: build
      env:
        INPUT_BUILD_ARGS: ${{inputs.build-args}}
      run: cmake --build . %INPUT_BUILD_ARGS%


    # CodeQL: Analyze
    - name: 'CodeQL: Analyze'
      uses: github/codeql-action/analyze@v2
      with:
        checkout_path: ${{github.workspace}}/source

    # Logs
    - name: Save Logs
      if: ${{always()} && steps.configure.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler
        if-no-files-found: ignore
