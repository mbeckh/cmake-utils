name: Test

on:
  push:
    branches: [ master, 'feature**' ]
  pull_request:
    branches: [ master ]

permissions: {}

concurrency: 
  group: ${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build-workflow:
    name: Build Workflow
    uses: ./.github/workflows/run-build.yml
    with:
      source-dir: test
      test-args: --label-regex "^Run$"
      pch: false
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write

  codeql-workflow:
    name: CodeQL Workflow
    needs: build-workflow
    uses: ./.github/workflows/run-codeql.yml
    with:
      source-dir: test
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write
      security-events: write

  test:
    name: Test
    needs: build-workflow
    runs-on: windows-latest
    strategy:
      matrix:
        preset: [ '', 'x64']
        multi-config: [ '', 'multi' ]
        configuration: [ Debug, Release ]
        unity: [ '', 'unity' ]
      fail-fast: false
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    # Restore
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Source: Restore'
      id: source-restore
      if: ${{steps.actions-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.ref}}-${{github.sha}}

    - name: Image Version
      id: image
      if: ${{steps.source-restore.outputs.cache-hit == 'true'}}
      shell: cmd
      run: ((echo os=%ImageOs%) & (echo version=%ImageVersion%)) >> %GITHUB_OUTPUT%

    - name: 'Tools: Restore'
      id: tools-restore
      if: ${{steps.source-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.image.outputs.os}}-${{steps.image.outputs.version}}

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      if: ${{steps.tools-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('source/test/vcpkg.json', 'source/test/vcpkg-configuration.json')}}

    - name: Fail on Cache Errors
      if: ${{steps.vcpkg-restore.outputs.cache-hit != 'true'}}
      run: exit 1

    - name: 'MSVC Environment: Restore'
      shell: bash
      run: |
        cmake-utils/.msvc.env >> $GITHUB_ENV

    # Configure, Build and Test
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        preset: ${{matrix.preset}}
        source-dir: source/test
        binary-dir: build
        generator: ${{matrix.multi-config && 'Ninja Multi-Config' || 'Ninja'}}
        configuration: ${{!matrix.multi-config && matrix.configuration || ''}}
        configurations: ${{matrix.multi-config && 'Debug;Release' || ''}}
        extra-args: ${{matrix.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON" -D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}}

    - name: Build
      shell: cmd
      working-directory: build
      run: cmake --build . ${{matrix.multi-config && format('--config "{0}"', matrix.configuration) || ''}}

    - name: Test
      shell: cmd
      working-directory: build
      run: ctest --output-on-failure ${{matrix.multi-config && format('-C "{0}"', matrix.configuration) || ''}}

    # Logs
    - name: Save Logs
      if: ${{always() && steps.configure.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: Build-${{matrix.preset || 'nopreset'}}-${{matrix.multi-config || 'single'}}-${{matrix.configuration}}-${{matrix.unity || 'regular'}}-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler
          build/Testing/**/*.log
          build/**/clang-tidy-*.log
        if-no-files-found: ignore
