# Copyright 2023 Michael Beckh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Test

on:
  push:
    branches: [ master, 'feature**' ]
  pull_request:
    branches: [ master ]

permissions: {}

concurrency:
  group: ${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: windows-latest
    strategy:
      matrix:
        preset: [ '', 'x64']
        multi-config: [ '', 'multi' ]
        configuration: [ Debug, Release ]
        unity: [ '', 'unity' ]
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.sha}}

    - name: 'Actions: Load'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter -o "cmake-utils-$GITHUB_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$GITHUB_SHA"
        mkdir cmake-utils
        tar -x $([[ $RUNNER_DEBUG == 1 ]] && echo -- "-v") -f "cmake-utils-$GITHUB_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --exclude='*.md' --wildcards \
            '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake'

    - name: 'Actions: Cache'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.sha}}
        restore-keys: cmu-source-

    - name: 'Source: Checkout'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Environment: Load
    - name: 'vcpkg: Hashes'
      id: state
      shell: bash
      working-directory: source/test
      run: |
        ((echo "image-os=$ImageOS") & (echo "image-version=$ImageVersion")) >> $GITHUB_OUTPUT
        if [[ -f vcpkg.json ]]; then
          registries=$(jq --sort-keys $([[ -f vcpkg-configuration.json ]] && echo '--slurp') '.' \
                           vcpkg.json $([[ -f vcpkg-configuration.json ]] && echo 'vcpkg-configuration.json') \
            | tee >((echo -n 'manifest-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT) \
            | jq '
                [
                  .. | ((."default-registry"? | objects), (.registries? | .[]?))
                  | select(.kind == "git")
                  | { repository, reference, baseline }
                  | del(.. | nulls)
                ] | sort')
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "$registries" || true
          if [[ $registries != '[]' ]]; then
            (echo -n 'registries-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT
          fi
        fi

    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}

    - name: 'vcpkg Registries: Restore'
      id: vcpkg-registries-restore
      if: ${{steps.state.outputs.registries-hash != ''}}
      uses: actions/cache/restore@v3
      with:
        path: vcpkg-registries
        key: cmu-vcpkg-registries-${{steps.state.outputs.registries-hash}}
        restore-keys: cmu-vcpkg-registries-

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-packages-restore
      if: ${{steps.state.outputs.manifest-hash != ''}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-${{steps.state.outputs.manifest-hash}}
        restore-keys: |
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-packages-hash=${{hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json',
                                               'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.stamp
        if [[ -f cmake-utils/.msvc.env ]]; then
          cat cmake-utils/.msvc.env >> $GITHUB_ENV
          echo "msvc-restored=true" >> $GITHUB_OUTPUT
        fi

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: ${{steps.tools-state.outputs.msvc-restored != 'true'}}
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure, Build and Test
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        preset: ${{matrix.preset}}
        source-dir: source/test
        binary-dir: build
        generator: ${{matrix.multi-config && 'Ninja Multi-Config' || 'Ninja'}}
        configuration: ${{!matrix.multi-config && matrix.configuration || ''}}
        configurations: ${{matrix.multi-config && 'Debug;Release' || ''}}
        extra-args: ${{matrix.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON" -D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} -D "VCPKG_INSTALL_OPTIONS=--debug;--debug-env"

    - name: Build
      shell: cmd
      working-directory: build
      run: cmake --build . ${{matrix.multi-config && format('--config "{0}"', matrix.configuration) || ''}}

    - name: Test
      shell: cmd
      working-directory: build
      run: ctest --output-on-failure ${{matrix.multi-config && format('-C "{0}"', matrix.configuration) || ''}}

    # Logs
    - name: Save Logs
      if: ${{always() && steps.configure.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: Test-Build-${{matrix.preset || 'nopreset'}}-${{matrix.multi-config || 'single'}}-${{matrix.configuration}}-${{matrix.unity || 'regular'}}-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler
          build/Testing/**/*.log
          build/**/clang-tidy-*.log
        if-no-files-found: ignore

  build-workflow:
    name: Build Workflow
    uses: ./.github/workflows/run-build.yml
    with:
      source-dir: test
      pch: false
      test-args: --label-regex "^Run$"
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write

  codeql-workflow:
    name: CodeQL Workflow
    uses: ./.github/workflows/run-codeql.yml
    with:
      source-dir: test
      codeql-queries: fixme-comment
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write
      security-events: write

  cleanup-post:
    name: 'Caches: Clean'
    if: ${{always()}}
    needs: [ test, build-workflow, codeql-workflow ]
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: Stale
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        stamp=$(curl --no-progress-meter \
                     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                     "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/attempts/$GITHUB_RUN_ATTEMPT?exclude_pull_requests=true" \
                  | jq -r '.run_started_at | sub("\\.\\d+Z$"; "Z") | fromdateiso8601')

        ref=$(echo -n "$GITHUB_REF" | jq -Rsr '@uri')
        curl -D caches.json.headers --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?ref=$ref" > caches.json
        next=$(egrep -i '^link: ' caches.json.headers | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
        while [[ -n $next ]]; do
          curl -D "caches.json.headers" --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               "$next" >> caches.json
          next=$(egrep -i '^link: ' caches.json.headers | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
        done

        if [[ 1 == 1 || $RUNNER_DEBUG -eq 1 ]]; then
            echo "::debug::stamp=$(jq -n -r --argjson stamp "$stamp" '$stamp | gmtime | strftime("%Y-%m-%d %H:%M:%S")')"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?ref=$ref"
            cat caches.json
            echo "::endgroup::"
        fi

        jq -r -s --argjson stamp "$stamp" '
            { "cmake-utils": 1, "source": 1, "tools": 2, "vcpkg-registries": 1, "vcpkg_installed": 2 } as $keep |
            [
              .[]
              | .actions_caches
              | .[]
              | (. + {"$cache": .key
                                | match("^cmu-(cmake-utils|source|tools|vcpkg-registries|vcpkg_installed)-")
                                | .captures[0].string })
            ]
            | group_by(."$cache")
            | map(. |= ( sort_by(.last_accessed_at)
                         | .[:-$keep[.[0]."$cache"]]
                         | map( (.created_at |= (sub(".\\d+Z$"; "Z") | fromdateiso8601))
                                | select(.created_at <= $stamp)
                                | (.last_accessed_at |= (sub(".\\d+Z$"; "Z") | fromdateiso8601))
                              )
                       )
                 )
            | flatten(1)
            | to_entries[]
            | [ .key, .value.id, .value.key, .value.ref
                , (.value.created_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
                , (.value.last_accessed_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
              ]
            | @tsv
            ' caches.json \
          | while IFS=$'\t' read sequence cache_id cache_key cache_ref cache_created cache_last_accessed; do
              if [[ -n $sequence ]]; then
                if [[ $sequence -eq 0 ]]; then
                  echo "## Clean Caches: Stale Caches" >> $GITHUB_STEP_SUMMARY
                  echo "| Branch | Key | Created | Last Accessed |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                fi
                echo "Removing cache $cache_key of $cache_ref (created: $cache_created, last access: $cache_last_accessed)"
                echo "| $cache_ref | $cache_key | $cache_created | $cache_last_accessed |" >> $GITHUB_STEP_SUMMARY
                #curl -X DELETE --no-progress-meter \
                #     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                #     "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches/${cache_id}"
              fi
            done
