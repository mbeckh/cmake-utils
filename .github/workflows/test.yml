name: Test

on:
  push:
    branches: [ master, 'feature**' ]
  pull_request:
    branches: [ master ]

permissions: {}

concurrency: 
  group: ${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: windows-latest
    strategy:
      matrix:
        preset: [ '', 'x64']
        multi-config: [ '', 'multi' ]
        configuration: [ Debug, Release ]
        unity: [ '', 'unity' ]
      fail-fast: false
    permissions:
      actions: write
      contents: read
      packages: write
    
    steps:
    - name: Get Image Version
      id: image
      shell: cmd
      run: ((echo os=%ImageOs%) & (echo version=%ImageVersion%)) >> %GITHUB_OUTPUT%
      
    - name: Restore Tools
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.image.outputs.os}}-${{steps.image.outputs.version}}

    - name: Restore MSVC Environment
      id: msvc-restore
      if: ${{steps.tools-restore.outputs.cache-hit == 'true'}}
      continue-on-error: true
      uses: ./source/env-restore
      with:
        env-file: msvc.env

    - name: Setup MSVC Environment
      id: msvc-setup
      if: ${{steps.msvc-restore.outcome != 'success'}}
      uses: ./source/msvc-dev-env
      with:
        env-file: msvc.env
        
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: source

    - name: Restore vcpkg Packages
      id: vcpkg-restore
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles(format('source{0}{1}/vcpkg.json', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || ''), format('source{0}{1}/vcpkg-configuration.json', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || ''))}}
        restore-keys: cmu-vcpkg_installed-

    - name: Get vcpkg Packages State
      id: vcpkg-cache
      shell: bash
      run: |
        echo "hash=${{hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > vcpkg.stamp

    - name: Configure
      uses: ./source/configure
      with:
        preset: ${{matrix.preset}}
        source-dir: source/test
        binary-dir: build
        generator: ${{matrix.multi-config && 'Ninja Multi-Config' || 'Ninja'}}
        configuration: ${{!matrix.multi-config && matrix.configuration || ''}}
        configurations: ${{matrix.multi-config && 'Debug;Release' || ''}}
        extra-args: ${{matrix.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON" -D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}}
        
    - name: Remove Updated Tools Cache
      id: tools-check
      if: ${{always() && steps.tools-restore.outputs.cache-hit == 'true'}}
      shell: bash
      env:
        INPUT_MSVC_SETUP: ${{steps.msvc-setup.conclusion}}
        INPUT_CACHE_KEY: ${{steps.tools-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ "$INPUT_MSVC_SETUP" == "success" || \
              (-d vcpkg-downloads/tools && \
               $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer vcpkg.stamp -printf "1" -quit) == 1) ]]; then
          curl --get -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter --data-urlencode "key=$INPUT_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: Cache Tools
      if: ${{always() && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: |
          msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: Remove Updated vcpkg Packages Cache
      id: vcpkg-check
      if: ${{always() && steps.vcpkg-restore.outputs.cache-hit == 'true' && steps.vcpkg-cache.outputs.hash != hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        INPUT_CACHE_KEY: ${{steps.vcpkg-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer vcpkg.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter --data-urlencode "key=$INPUT_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
        echo "updated=true" >> $GITHUB_OUTPUT

    - name: Cache vcpkg Packages
      if: ${{always() && (steps.vcpkg-restore.outputs.cache-hit != 'true' || steps.vcpkg-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    - name: Build
      shell: cmd
      working-directory: build
      run: cmake --build . ${{matrix.multi-config && format('--config "{0}"', matrix.configuration) || ''}}

    - name: Test
      shell: cmd
      working-directory: build
      run: ctest --output-on-failure ${{matrix.multi-config && format('-C "{0}"', matrix.configuration) || ''}}

    - name: Save Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Build-${{matrix.preset || 'nopreset'}}-${{matrix.multi-config || 'single'}}-${{matrix.configuration}}-${{matrix.unity || 'regular'}}-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler
          build/Testing/**/*.log
          build/**/clang-tidy-*.log
        if-no-files-found: ignore

  build-workflow:
    name: Build Workflow
    uses: ./.github/workflows/run-build.yml
    with:
      source-dir: test
      test-args: --label-regex "^Run$"
      pch: false
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write

  codeql-workflow:
    name: CodeQL Workflow
    uses: ./.github/workflows/run-codeql.yml
    with:
      source-dir: test
    secrets: inherit
    permissions:
      actions: write
      contents: read
      packages: write
      security-events: write

