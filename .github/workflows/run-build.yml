name: Build

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to current directory)
        type: string
        default: .
      unity:
        description: Use unity build in CMake.
        type: boolean
        default: true
      pch:
        description: Use precompiled headers.
        type: boolean
        default: true
      extra-args:
        description: Extra arguments for CMake configure.
        type: string
    secrets:
      CODACY_PROJECT_API_TOKEN:
        required: true

permissions: {}
  
concurrency: 
  group: run-build-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  configure:
    name: Configure
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore vcpkg
      id: vcpkg-restore
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}
        restore-keys: cmu-vcpkg_installed-
      
    - name: Get vcpkg State
      id: vcpkg-cache
      shell: bash
      run: |
        echo "hash=${{hashFiles('build/bin/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > build/vcpkg.stamp
    
    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Configure
      id: configure
      # FIXME when done
      uses: mbeckh/cmake-utils/configure@build-job
      with:
        build-root: build
        source-dir: ${{inputs.source-dir}}
        binary-dir: build/bin
        generator: Ninja Multi-Config
        extra-args: ${{inputs.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON"' || ''}} ${{!inputs.pch && '-D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} ${{inputs.extra-args}}

    - name: Remove Stale vcpkg Cache
      id: vcpkg-check
      if: ${{always() && steps.vcpkg-restore.outputs.cache-hit && steps.vcpkg-cache.outputs.hash != hashFiles('build/bin/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vckpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/bin/vcpkg_installed -newer build/vcpkg.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=${{steps.vcpkg-restore.outputs.cache-primary-key}}&ref=$GITHUB_REF"
        echo "updated=1" >> $GITHUB_OUTPUT

    - name: Cache vcpkg
      if: ${{always() && (!steps.vcpkg-restore.outputs.cache-hit || steps.vcpkg-check.outputs.updated)}}
      uses: actions/cache/save@v3
      with:
        path: build/bin/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    - name: Cache Source
      uses: actions/cache/save@v3
      with:
        path: |
          *
          !build
          !.git
          .git/*
          !.git/hooks
          !.git/objects
        key: cmu-source-${{github.workflow}}-${{github.run_number}}

    - name: Cache Build Environment
      uses: actions/cache/save@v3
      with:
        path: |
          build/bin/*
          !build/bin/vcpkg_installed
          !build/bin/vcpkg-buildtrees
          !build/bin/vcpkg-packages
        key: cmu-build-${{github.workflow}}-${{github.run_number}}

    - name: Force Fail for Debugging
      shell: cmd
      run: exit 1
      
  build:
    name: Build
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    - name: Restore Build Environment
      id: build-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          .
          !build/**
          build/bin
          !build/bin/vcpkg_installed/**
        key: cmu-build-${{github.workflow}}-${{github.run_number}}
 
 
    - name: Build Environment
      shell: bash
      run: find .
      
    - name: Restore vcpkg
      id: vcpkg-restore
      if: steps.build-restore.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}

    - name: vcpkg
      shell: bash
      working-directory: build/bin/vcpkg_installed
      run: find .

    - name: Fail on Cache Errors
      if: ${{!steps.vcpkg-restore.outputs.cache-hit}}
      run: exit 1

    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Build
      shell: cmd
      working-directory: build/bin
      run: cmake --build . --config ${{matrix.configuration}}

    - name: Test
      if: matrix.configuration != 'Debug'
      shell: cmd
      working-directory: build/bin
      run: ctest --output-on-failure -C ${{matrix.configuration}}

    - name: Coverage
      if: matrix.configuration == 'Debug'
      uses: mbeckh/code-quality-actions/coverage@v1
      with:
        source-dir: ${{inputs.source-dir}}
        binary-dir: build/bin
        #command: ctest --output-on-failure -C Debug
        command: Debug/ok.exe
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Codecov
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        files: build/bin/coverage-*.xml
        fail_ci_if_error: true
        
    - name: Save Build Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Build-Logs
        path: |
            build/vcpkg-buildtrees/*/*.log
            !build/vcpkg-buildtrees/detect_compiler/**
            build/bin/Testing/**/*.log
  
  analyze:
    name: Analyze
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    - name: Restore Build Environment
      id: build-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          .
          !build/**
          build/bin
          !build/bin/vcpkg_installed/**
        key: cmu-build-${{github.workflow}}-${{github.run_number}}

    - name: Restore vcpkg
      id: vcpkg-restore
      if: steps.build-restore.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}

    - name: Fail on Cache Errors
      if: ${{!steps.vcpkg-restore.outputs.cache-hit}}
      run: exit 1

    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Analyze
      shell: cmd
      working-directory: build/bin
      run: cmake --build . --config ${{matrix.configuration}} --target clang-tidy

    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: partial
        binary-dir: build/bin
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Save Analyze Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Analyze-Logs
        path: |
            build/vcpkg-buildtrees/*/*.log
            !build/vcpkg-buildtrees/detect_compiler/**
            build/bin/${{matrix.configuration}}/clang-tidy-*.log
  
  final:
    name: Send Completion Message
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: final
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

  cleanup:
    name: Remove Source and Build Environment Cache
    if: ${{always()}}
    runs-on: ubuntu-latest
    needs: [ build, analyze ]
    permissions:
      actions: write
    
    steps:
    - name: Remove Source Cache
      if: ${{always()}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=cmu-source-$GITHUB_WORKFLOW-$GITHUB_RUN_NUMBER"
    
    - name: Remove Build Environment Cache
      if: ${{always()}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=cmu-build-$GITHUB_WORKFLOW-$GITHUB_RUN_NUMBER"
