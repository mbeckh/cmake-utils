name: Build

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to current directory)
        default: .
        type: string
      unity:
        description: Use unity build in CMake.
        default: true
        type: boolean
      pch:
        description: Use precompiled headers.
        default: true
        type: boolean
      extra-args:
        description: Extra arguments for CMake configure.
        type: string
    secrets:
      CODACY_PROJECT_API_TOKEN:
        required: true

concurrency: 
  group: ${{format('run-build-{0}-{1}-{2}', github.workflow, github.event_name, github.head_ref || github.ref)}}
  cancel-in-progress: true

jobs:
  action:
    name: Check Action
    runs-on: windows-latest
    steps:
    - name: Setup MSVC Environment
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job
      with:
        foo: foo-bar

  configure:
    name: Configure
    if: 1 == 2
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore CMake
      id: cache-cmake
      uses: actions/cache/restore@v3
      with:
        path: |
          build/bin
          !build/bin/vcpkg_installed/**
        key: cmu-cmake-${{hashFiles('**/CMakeLists.txt', '**/CMakePresets.json', '**/*.cmake', '!build/**')}}
        restore-keys: cmu-cmake-

    - name: Restore vcpkg
      id: cache-vcpkg
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}
        restore-keys: cmu-vcpkg_installed-

    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Configure
      # FIXME when done
      uses: mbeckh/cmake-utils/configure@build-job
      with:
        build-root: build
        source-dir: ${{inputs.source-dir}}
        binary-dir: build/bin
        generator: Ninja Multi-Config
        extra-args: ${{inputs.unity && '-D CMAKE_UNITY_BUILD:BOOL=ON' || ''}} ${{!inputs.pch && '-D CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON' || ''}} ${{inputs.extra-args}}

    - name: Cache vcpkg
      if: ${{always() && !steps.cache-vcpkg.outputs.cache-hit}}
      uses: actions/cache/save@v3
      with:
        path: build/bin/vcpkg_installed
        key: ${{steps.cache-vcpkg.outputs.cache-primary-key}}

    - name: Cache CMake
      if: ${{always() && !steps.cache-cmake.outputs.cache-hit}}
      uses: actions/cache/save@v3
      with:
        path: |
          build/bin
          !build/bin/vcpkg_installed/**
        key: ${{steps.cache-cmake.outputs.cache-primary-key}}

    - name: Cache Source
      uses: actions/cache/save@v3
      with:
        path: |
          .
          !build
        key: cmu-source-${{github.sha}}

  build:
    name: Build
    if: 1 == 2
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]

    steps:
    - name: Restore Source
      id: cache-source
      uses: actions/cache/restore@v3
      with:
        path: |
          .
          !build
        key: cmu-source-${{github.sha}}

    - name: Restore CMake
      id: cache-cmake
      if: steps.cache-source.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: |
          build/bin
          !build/bin/vcpkg_installed/**
        key: cmu-cmake-${{hashFiles('**/CMakeLists.txt', '**/CMakePresets.json', '**/*.cmake', '!build/**')}}

    - name: Restore vcpkg
      id: cache-vcpkg
      if: steps.cache-cmake.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}

    - name: Check Cache
      if: ${{!steps.cache-vcpkg.outputs.cache-hit}}
      run: exit 1

    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Build
      shell: cmd
      working-directory: build/bin
      run: cmake --build . --config ${{matrix.configuration}}

    - name: Test
      if: matrix.configuration != 'Debug'
      shell: cmd
      working-directory: build/bin
      run: ctest --output-on-failure -C ${{matrix.configuration}}

    - name: Coverage
      if: matrix.configuration == 'Debug'
      uses: mbeckh/code-quality-actions/coverage@v1
      with:
        source-dir: ${{inputs.source-dir}}
        binary-dir: build/bin
        #command: ctest --output-on-failure -C Debug
        command: Debug/ok.exe
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Codecov
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        files: build/bin/coverage-*.xml
        fail_ci_if_error: true
        
    - name: Save Build Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Build-Logs
        path: |
            build/vcpkg-buildtrees/*/*.log
            !build/vcpkg-buildtrees/detect_compiler
            build/bin/Testing/**/*.log
  
  analyze:
    name: Analyze
    if: 1 == 2
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]

    steps:
    - name: Restore Source
      id: cache-source
      uses: actions/cache/restore@v3
      with:
        path: |
          .
          !build
        key: cmu-source-${{github.sha}}

    - name: Restore CMake
      id: cache-cmake
      if: steps.cache-source.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: |
          build/bin
          !build/bin/vcpkg_installed/**
        key: cmu-cmake-${{hashFiles('**/CMakeLists.txt', '**/CMakePresets.json', '**/*.cmake', '!build/**')}}

    - name: Restore vcpkg
      id: cache-vcpkg
      if: steps.cache-cmake.outputs.cache-hit
      uses: actions/cache/restore@v3
      with:
        path: build/bin/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json', '!build/**')}}

    - name: Check Cache
      if: ${{!steps.cache-vcpkg.outputs.cache-hit}}
      run: exit 1

    - name: Setup MSVC Environment
      # FIXME when done
      uses: mbeckh/cmake-utils/msvc-dev-env@build-job

    - name: Analyze
      shell: cmd
      working-directory: build/bin
      run: cmake --build . --config ${{matrix.configuration}} --target clang-tidy

    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: partial
        binary-dir: build/bin
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Save Analyze Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Analyze-Logs
        path: |
            build/vcpkg-buildtrees/*/*.log
            !build/vcpkg-buildtrees/detect_compiler
            build/bin/${{matrix.configuration}}/clang-tidy-*.log
  
  final:
    name: Send Completion Message
    if: 1 == 2
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: final
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

  cleanup:
    name: Remove CMake Cache
    if: ${{false && always()}}
    runs-on: ubuntu-latest
    needs: [ build, analyze ]
    
    steps:
    - name: Remove Source Cache
      shell: bash
      run: |
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" ${{format('{0}/repos/{1}/actions/caches?key=cmu-source-{2}', github.api_url, github.repository, github.sha)}}
