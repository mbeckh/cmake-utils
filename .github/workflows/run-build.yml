# Copyright 2023 Michael Beckh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to working directory).
        type: string
        default: .
      unity:
        description: Use unity build in CMake (optional, defaults to true).
        type: boolean
        default: true
      pch:
        description: Use precompiled headers (optional, defaults to true).
        type: boolean
        default: true
      configure-args:
        description: Extra arguments for CMake configure (optional).
        type: string
      build-args:
        description: Extra arguments for CMake build (optional).
        type: string
      test-args:
        description: Extra arguments for CTest (optional).
        type: string
    secrets:
      CODACY_PROJECT_API_TOKEN:
        required: true

permissions: {}

concurrency:
  group: run-build-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.job_workflow_sha}}

    - name: 'Actions: Load'
      if: steps.actions-restore.outputs.cache-hit != 'true'
      shell: bash
      env:
        JOB_WORKFLOW_SHA: ${{github.job_workflow_sha}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter -o "cmake-utils-$JOB_WORKFLOW_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$JOB_WORKFLOW_SHA"
        mkdir cmake-utils
        tar -x $([[ $RUNNER_DEBUG == 1 ]] && echo -- "-v") -f "cmake-utils-$JOB_WORKFLOW_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --exclude='*.md' --wildcards \
            '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake'

    - name: 'Actions: Cache'
      if: steps.actions-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.sha}}
        restore-keys: cmu-source-

    - name: 'Source: Checkout'
      if: steps.source-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Cache'
      if: steps.source-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Environment: Load
    - name: 'vcpkg: Hashes'
      id: state
      shell: bash
      working-directory: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
      run: |
        ((echo "image-os=$ImageOS") & (echo "image-version=$ImageVersion")) >> $GITHUB_OUTPUT
        if [[ -f vcpkg.json ]]; then
          registries=$(jq --sort-keys $([[ -f vcpkg-configuration.json ]] && echo '--slurp') '.' \
                           vcpkg.json $([[ -f vcpkg-configuration.json ]] && echo 'vcpkg-configuration.json') \
            | tee >((echo -n 'manifest-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT) \
            | jq '
                [
                  .. | ((."default-registry"? | objects), (.registries? | .[]?))
                  | select(.kind == "git")
                  | { repository, reference, baseline }
                  | del(.. | nulls)
                ] | sort')
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "$registries" || true
          if [[ $registries != '[]' ]]; then
            (echo -n 'registries-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT
          fi
        fi

    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}

    - name: 'vcpkg Registries: Restore'
      id: vcpkg-registries-restore
      if: steps.state.outputs.registries-hash != ''
      uses: actions/cache/restore@v3
      with:
        path: vcpkg-registries
        key: cmu-vcpkg-registries-${{steps.state.outputs.registries-hash}}
        restore-keys: cmu-vcpkg-registries-

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-packages-restore
      if: steps.state.outputs.manifest-hash != ''
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-${{steps.state.outputs.manifest-hash}}
        restore-keys: |
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-packages-hash=${{hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.stamp
        if [[ -f cmake-utils/.msvc.env ]]; then
          cat cmake-utils/.msvc.env >> $GITHUB_ENV
          echo "msvc-restored=true" >> $GITHUB_OUTPUT
        fi

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: steps.tools-state.outputs.msvc-restored != 'true'
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        source-dir: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
        binary-dir: build
        configuration: ${{matrix.configuration}}
        extra-args: ${{inputs.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON"' || ''}} ${{!inputs.pch && '-D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} ${{inputs.configure-args}}

    # Build Environment: Cache
    - name: 'Tools: Check for Updates'
      id: tools-check
      if: always() && steps.configure.outcome != 'skipped' && steps.tools-restore.outputs.cache-hit == 'true'
      shell: bash
      env:
        CACHE_KEY: ${{steps.tools-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ cmake-utils/.msvc.env -nt cmake-utils/.stamp \
              || -d vcpkg-downloads/tools \
                 && $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer cmake-utils/.stamp \
                                                 -printf '1' -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'Tools: Cache'
      if: always() && steps.configure.outcome != 'skipped' && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')
      uses: actions/cache/save@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Registries: Check for Updates'
      id: vcpkg-registries-check
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outputs.cache-hit == 'true'
      shell: bash
      env:
        CACHE_KEY: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ $(find vcpkg-registries -type f -newer cmake-utils/.stamp -printf '1' -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'vcpkg Registries: Cache'
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outcome != 'skipped' && (steps.vcpkg-registries-restore.outputs.cache-hit != 'true' || steps.vcpkg-registries-check.outputs.updated == 'true')
      uses: actions/cache/save@v3
      with:
        path: vcpkg-registries
        key: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Packages: Check for Updates'
      id: vcpkg-packages-check
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-packages-restore.outputs.cache-hit == 'true' && steps.tools-state.outputs.vcpkg-packages-hash != hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')
      shell: bash
      env:
        CACHE_KEY: ${{steps.vcpkg-packages-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer cmake-utils/.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'vcpkg Packages: Cache'
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-packages-restore.outcome != 'skipped' && (steps.vcpkg-packages-restore.outputs.cache-hit != 'true' || steps.vcpkg-packages-check.outcome == 'success')
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-packages-restore.outputs.cache-primary-key}}

    # Build and Test
    - name: Build
      shell: cmd
      working-directory: build
      env:
        INPUT_BUILD_ARGS: ${{inputs.build-args}}
      run: cmake --build . %INPUT_BUILD_ARGS%

    - name: Test
      id: test
      if: matrix.configuration != 'Debug'
      shell: cmd
      working-directory: build
      env:
        INPUT_TEST_ARGS: ${{inputs.test-args}}
      run: ctest --output-on-failure %INPUT_TEST_ARGS%

    - name: Coverage
      id: coverage
      if: matrix.configuration == 'Debug'
      uses: mbeckh/code-quality-actions/coverage@v1
      with:
        source-dir: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
        binary-dir: build
        command: ctest --output-on-failure -C ${{matrix.configuration}} ${{inputs.test-args}}
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Codecov
      if: steps.coverage.outcome == 'success'
      uses: codecov/codecov-action@v3
      with:
        files: build/coverage-*.xml
        fail_ci_if_error: true

    # Logs
    - name: Save Logs
      if: always() && steps.configure.outcome != 'skipped'
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Build-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler/**
          build/Testing/**/*.log
        if-no-files-found: ignore

  analyze:
    name: Analyze
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.job_workflow_sha}}

    - name: 'Actions: Load'
      if: steps.actions-restore.outputs.cache-hit != 'true'
      shell: bash
      env:
        JOB_WORKFLOW_SHA: ${{github.job_workflow_sha}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter -o "cmake-utils-$JOB_WORKFLOW_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$JOB_WORKFLOW_SHA"
        mkdir cmake-utils
        tar -x $([[ $RUNNER_DEBUG == 1 ]] && echo -- "-v") -f "cmake-utils-$JOB_WORKFLOW_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --exclude='*.md' --wildcards \
            '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake'

    - name: 'Actions: Cache'
      if: steps.actions-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.sha}}
        restore-keys: cmu-source-

    - name: 'Source: Checkout'
      if: steps.source-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Cache'
      if: steps.source-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Environment: Load
    - name: 'vcpkg: Hashes'
      id: state
      shell: bash
      working-directory: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
      run: |
        ((echo "image-os=$ImageOS") & (echo "image-version=$ImageVersion")) >> $GITHUB_OUTPUT
        if [[ -f vcpkg.json ]]; then
          registries=$(jq --sort-keys $([[ -f vcpkg-configuration.json ]] && echo '--slurp') '.' \
                           vcpkg.json $([[ -f vcpkg-configuration.json ]] && echo 'vcpkg-configuration.json') \
            | tee >((echo -n 'manifest-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT) \
            | jq '
                [
                  .. | ((."default-registry"? | objects), (.registries? | .[]?))
                  | select(.kind == "git")
                  | { repository, reference, baseline }
                  | del(.. | nulls)
                ] | sort')
          [[ $RUNNER_DEBUG -eq 1 ]] && echo "$registries" || true
          if [[ $registries != '[]' ]]; then
            (echo -n 'registries-hash=' && (sha1sum - | cut -d ' ' -f 1)) >> $GITHUB_OUTPUT
          fi
        fi

    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}

    - name: 'vcpkg Registries: Restore'
      id: vcpkg-registries-restore
      if: steps.state.outputs.registries-hash != ''
      uses: actions/cache/restore@v3
      with:
        path: vcpkg-registries
        key: cmu-vcpkg-registries-${{steps.state.outputs.registries-hash}}
        restore-keys: cmu-vcpkg-registries-

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-packages-restore
      if: steps.state.outputs.manifest-hash != ''
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-${{steps.state.outputs.manifest-hash}}
        restore-keys: |
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-${{steps.state.outputs.image-version}}-
          cmu-vcpkg_installed-${{steps.state.outputs.image-os}}-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-packages-hash=${{hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.stamp
        if [[ -f cmake-utils/.msvc.env ]]; then
          cat cmake-utils/.msvc.env >> $GITHUB_ENV
          echo "msvc-restored=true" >> $GITHUB_OUTPUT
        fi

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: steps.tools-state.outputs.msvc-restored != 'true'
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        source-dir: source${{inputs.source-dir != '.' && inputs.source-dir && '/' || ''}}${{inputs.source-dir != '.' && inputs.source-dir || ''}}
        binary-dir: build
        configuration: ${{matrix.configuration}}
        extra-args: ${{inputs.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON"' || ''}} ${{!inputs.pch && '-D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} ${{inputs.configure-args}}

    # Build Environment: Cache
    - name: 'Tools: Check for Updates'
      id: tools-check
      if: always() && steps.configure.outcome != 'skipped' && steps.tools-restore.outputs.cache-hit == 'true'
      shell: bash
      env:
        CACHE_KEY: ${{steps.tools-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ cmake-utils/.msvc.env -nt cmake-utils/.stamp \
              || -d vcpkg-downloads/tools \
                 && $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer cmake-utils/.stamp \
                                                 -printf '1' -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'Tools: Cache'
      if: always() && steps.configure.outcome != 'skipped' && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')
      uses: actions/cache/save@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Registries: Check for Updates'
      id: vcpkg-registries-check
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outputs.cache-hit == 'true'
      shell: bash
      env:
        CACHE_KEY: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ $(find vcpkg-registries -type f -newer cmake-utils/.stamp -printf '1' -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'vcpkg Registries: Cache'
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-registries-restore.outcome != 'skipped' && (steps.vcpkg-registries-restore.outputs.cache-hit != 'true' || steps.vcpkg-registries-check.outputs.updated == 'true')
      uses: actions/cache/save@v3
      with:
        path: vcpkg-registries
        key: ${{steps.vcpkg-registries-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Packages: Check for Updates'
      id: vcpkg-packages-check
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-packages-restore.outputs.cache-hit == 'true' && steps.tools-state.outputs.vcpkg-packages-hash != hashFiles('build/vcpkg_installed/vcpkg/vcpkg-lock.json', 'build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')
      shell: bash
      env:
        VCPKG_CACHE_KEY: ${{steps.vcpkg-packages-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer cmake-utils/.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$VCPKG_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'vcpkg Packages: Cache'
      if: always() && steps.configure.outcome != 'skipped' && steps.vcpkg-packages-restore.outcome != 'skipped' && (steps.vcpkg-packages-restore.outputs.cache-hit != 'true' || steps.vcpkg-packages-check.outcome == 'success')
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-packages-restore.outputs.cache-primary-key}}

    # Analyze
    - name: Analyze
      id: analyze
      shell: cmd
      working-directory: build
      run: cmake --build . --target clang-tidy

    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: partial
        binary-dir: build
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Save Logs
      if: always() && steps.analyze.outcome != 'skipped'
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Analyze-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler/**
          build/${{matrix.configuration}}/clang-tidy-*.log
        if-no-files-found: ignore

  completion:
    name: Send Completion Message
    runs-on: ubuntu-latest
    needs: analyze

    steps:
    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: final
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

  cleanup-pre:
    name: 'Caches: Old Branches'
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: Deleted Branches
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        function load_paged {
          curl -D "$2.headers" --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               "$1" > "$2"
          next=$(egrep -i '^link: ' "$2.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
          while [[ -n $next ]]; do
            curl -D "$2.headers" --no-progress-meter \
                 -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                 "$next" >> "$2"
            next=$(egrep -i '^link: ' "$2.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
          done
        }

        stamp=$(jq -n -r 'now')
        load_paged "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches" caches.json

        load_paged "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/matching-refs/heads" branches.json
        jq -r '.[] | .ref | @json' branches.json > branch-names.json

        load_paged "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls?state=open" pulls.json
        jq -r '.[] | .number | "refs/pull/" + (. | tostring) + "/merge" | @json' pulls.json >> branch-names.json

        if [[ $RUNNER_DEBUG -eq 1 ]]; then
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/matching-refs/heads"
            cat branches.json
            echo "::endgroup::"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY//pulls?state=open"
            cat pulls.json
            echo "::endgroup::"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
            cat caches.json
            echo "::endgroup::"
            echo "::group::Active Branches"
            cat branch-names.json
            echo "::endgroup::"
        fi

        jq -r --slurpfile branches branch-names.json --argjson stamp "$stamp" '
            .actions_caches
            | map( select(.ref | IN($branches[]) | not)
                   | (.last_accessed_at |= (sub("\\.\\d+Z$"; "Z") | fromdateiso8601))
                   | select(.last_accessed_at <= $stamp )
                   | (.created_at |= (sub("\\.\\d+Z$"; "Z") | fromdateiso8601))
                 )
            | to_entries[]
            | [ .key, .value.id, .value.key, .value.ref
                , (.value.created_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
                , (.value.last_accessed_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
              ]
            | @tsv
            ' caches.json \
          | while IFS=$'\t' read sequence cache_id cache_key cache_ref cache_created cache_last_accessed; do
              if [[ -n $sequence ]]; then
                if [[ $sequence -eq 0 ]]; then
                  echo "## Clean Caches: Deleted Branches" >> $GITHUB_STEP_SUMMARY
                  echo "| Branch | Key | Created | Last Accessed |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                fi
                echo "Removing cache $cache_key of $cache_ref (created: $cache_created, last access: $cache_last_accessed)"
                echo "| $cache_ref | $cache_key | $cache_created | $cache_last_accessed |" >> $GITHUB_STEP_SUMMARY
                curl -X DELETE --no-progress-meter \
                     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                     "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches/${cache_id}"
              fi
            done

  cleanup-post:
    name: 'Caches: Clean'
    if: always()
    needs: [ build, analyze ]
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: Stale
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        stamp=$(curl --no-progress-meter \
                     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                     "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/attempts/$GITHUB_RUN_ATTEMPT?exclude_pull_requests=true" \
                  | jq -r '.run_started_at | sub("\\.\\d+Z$"; "Z") | fromdateiso8601')

        ref=$(echo -n "$GITHUB_REF" | jq -Rsr '@uri')
        curl -D caches.json.headers --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?ref=$ref" > caches.json
        next=$(egrep -i '^link: ' caches.json.headers | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
        while [[ -n $next ]]; do
          curl -D "caches.json.headers" --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               "$next" >> caches.json
          next=$(egrep -i '^link: ' caches.json.headers | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
        done

        if [[ 1 == 1 || $RUNNER_DEBUG -eq 1 ]]; then
            echo "::debug::stamp=$(jq -n -r --argjson stamp "$stamp" '$stamp | gmtime | strftime("%Y-%m-%d %H:%M:%S")')"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?ref=$ref"
            cat caches.json
            echo "::endgroup::"
        fi

        jq -r -s --argjson stamp "$stamp" '
            { "cmake-utils": 1, "source": 1, "tools": 2, "vcpkg-registries": 1, "vcpkg_installed": 2 } as $keep |
            [
              .[]
              | .actions_caches
              | .[]
              | (. + {"$cache": .key
                                | match("^cmu-(cmake-utils|source|tools|vcpkg-registries|vcpkg_installed)-")
                                | .captures[0].string })
            ]
            | group_by(."$cache")
            | map(. |= ( sort_by(.last_accessed_at)
                         | .[:-$keep[.[0]."$cache"]]
                         | map( (.created_at |= (sub("\\.\\d+Z$"; "Z") | fromdateiso8601))
                                | select(.created_at <= $stamp)
                                | (.last_accessed_at |= (sub("\\.\\d+Z$"; "Z") | fromdateiso8601))
                              )
                       )
                 )
            | flatten(1)
            | to_entries[]
            | [ .key, .value.id, .value.key, .value.ref
                , (.value.created_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
                , (.value.last_accessed_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
              ]
            | @tsv
            ' caches.json \
          | while IFS=$'\t' read sequence cache_id cache_key cache_ref cache_created cache_last_accessed; do
              if [[ -n $sequence ]]; then
                if [[ $sequence -eq 0 ]]; then
                  echo "## Clean Caches: Stale Caches" >> $GITHUB_STEP_SUMMARY
                  echo "| Branch | Key | Created | Last Accessed |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                fi
                echo "Removing cache $cache_key of $cache_ref (created: $cache_created, last access: $cache_last_accessed)"
                echo "| $cache_ref | $cache_key | $cache_created | $cache_last_accessed |" >> $GITHUB_STEP_SUMMARY
                curl -X DELETE --no-progress-meter \
                     -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                     "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches/${cache_id}"
              fi
            done
