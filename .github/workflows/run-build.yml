name: Build

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to working directory)
        type: string
        default: .
      unity:
        description: Use unity build in CMake (optional, defaults to true).
        type: boolean
        default: true
      pch:
        description: Use precompiled headers (optional, defaults to true).
        type: boolean
        default: true
      configure-args:
        description: Extra arguments for CMake configure (optional).
        type: string
      build-args:
        description: Extra arguments for CMake build (optional).
        type: string
      test-args:
        description: Extra arguments for CTest (optional).
        type: string
    secrets:
      CODACY_PROJECT_API_TOKEN:
        required: true

permissions: {}
  
concurrency: 
  group: run-build-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  configure:
    name: Configure
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    - name: Restore Project Environment (Source and Build)
      id: project-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          dev.env
          source/*
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: ${{format('cmu-{0}-{1}-{2}-{3}', github.workflow, env.ImageOS, env.ImageVersion, github.sha)}}
        restore-keys: ${{format('cmu-{0}-{1}-{2}-', github.workflow, env.ImageOS, env.ImageVersion)}}

    - name: Restore vcpkg
      id: vcpkg-restore
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles(format('source{0}{1}/vcpkg.json', inputs.source-dir && '/' || '', inputs.source-dir), format('source{0}{1}/vcpkg-configuration.json', inputs.source-dir && '/' || '', inputs.source-dir))}}
        restore-keys: cmu-vcpkg_installed-
      
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: Get vcpkg State
      id: vcpkg-cache
      shell: bash
      run: |
        echo "hash=${{hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > vcpkg.stamp
    
    - name: Setup MSVC Environment
      if: ${{steps.project-restore.outputs.cache-matched-key == ''}}
      uses: mbeckh/cmake-utils/msvc-dev-env@v1
      with:
        env-file: dev.env

    - name: Restore MSVC Environment
      if: ${{steps.project-restore.outputs.cache-matched-key != ''}}
      uses: mbeckh/cmake-utils/env-restore@v1
      with:
        env-file: dev.env

    - name: Configure
      uses: mbeckh/cmake-utils/configure@v1
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir && '/' || '', inputs.source-dir)}}
        binary-dir: build
        generator: Ninja Multi-Config
        extra-args: ${{inputs.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON"' || ''}} ${{!inputs.pch && '-D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} ${{inputs.configure-args}}

    - name: Remove Old Project Cache
      if: ${{always() && steps.project-restore.outputs.cache-hit == 'true'}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=${{steps.project-restore.outputs.cache-primary-key}}&ref=$GITHUB_REF"

    - name: Cache Project Environment
      if: ${{always()}}
      uses: actions/cache/save@v3
      with:
        path: |
          dev.env
          source/*
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: ${{steps.project-restore.outputs.cache-primary-key}}

    - name: Check vcpkg Update
      id: vcpkg-check
      if: ${{always() && steps.vcpkg-restore.outputs.cache-hit == 'true' && steps.vcpkg-cache.outputs.hash != hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer vcpkg.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=${{steps.vcpkg-restore.outputs.cache-primary-key}}&ref=$GITHUB_REF"
        echo "updated=true" >> $GITHUB_OUTPUT

    - name: Cache vcpkg
      if: ${{always() && (steps.vcpkg-restore.outputs.cache-hit != 'true' || steps.vcpkg-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    - name: Save vcpkg Logs
      if: ${{always()}}
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler/**
        if-no-files-found: ignore

  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    - name: Restore Project Environment
      id: project-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          dev.env
          source/*
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: ${{format('cmu-{0}-{1}-{2}-{3}', github.workflow, env.ImageOS, env.ImageVersion, github.sha)}}
 
    - name: Restore vcpkg
      id: vcpkg-restore
      if: ${{steps.project-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles(format('source{0}{1}/vcpkg.json', inputs.source-dir && '/' || '', inputs.source-dir), format('source{0}{1}/vcpkg-configuration.json', inputs.source-dir && '/' || '', inputs.source-dir))}}

    - name: Fail on Cache Errors
      if: ${{steps.vcpkg-restore.outputs.cache-hit != 'true'}}
      run: exit 1

    - name: Restore MSVC Environment
      uses: mbeckh/cmake-utils/env-restore@v1
      with:
        env-file: dev.env

    - name: Build
      shell: cmd
      working-directory: build
      env:
        INPUT_BUILD_ARGS: ${{inputs.build-args}}
      run: cmake --build . --config ${{matrix.configuration}} %INPUT_BUILD_ARGS%

    - name: Test
      if: matrix.configuration != 'Debug'
      shell: cmd
      working-directory: build
      env:
        INPUT_TEST_ARGS: ${{inputs.test-args}}
      run: ctest --output-on-failure -C ${{matrix.configuration}} %INPUT_TEST_ARGS%

    - name: Coverage
      if: matrix.configuration == 'Debug'
      uses: mbeckh/code-quality-actions/coverage@v1
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir && '/' || '', inputs.source-dir)}}
        binary-dir: build
        command: ctest --output-on-failure -C ${{matrix.configuration}} ${{inputs.test-args}}
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Codecov
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        files: build/coverage-*.xml
        fail_ci_if_error: true
        
    - name: Save Test Logs
      if: ${{always()}}
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Test-Logs
        path: build/Testing/**/*.log
        if-no-files-found: ignore
  
  analyze:
    name: Analyze
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    - name: Restore Project Environment
      id: project-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          dev.env
          source/*
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: ${{format('cmu-{0}-{1}-{2}-{3}', github.workflow, env.ImageOS, env.ImageVersion, github.sha)}}

    - name: Restore vcpkg
      id: vcpkg-restore
      if: ${{steps.project-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: cmu-vcpkg_installed-${{hashFiles(format('source{0}{1}/vcpkg.json', inputs.source-dir && '/' || '', inputs.source-dir), format('source{0}{1}/vcpkg-configuration.json', inputs.source-dir && '/' || '', inputs.source-dir))}}

    - name: Fail on Cache Errors
      if: ${{steps.vcpkg-restore.outputs.cache-hit != 'true'}}
      run: exit 1

    - name: Restore MSVC Environment
      uses: mbeckh/cmake-utils/env-restore@v1
      with:
        env-file: dev.env

    - name: Analyze
      shell: cmd
      working-directory: build
      run: cmake --build . --config ${{matrix.configuration}} --target clang-tidy

    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: partial
        binary-dir: build
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Save Analyze Logs
      if: ${{always()}}
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Analyze-Logs
        path: build/${{matrix.configuration}}/clang-tidy-*.log
        if-no-files-found: ignore
  
  completion:
    name: Send Completion Message
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: final
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

  cleanup:
    name: Remove Outdated Caches
    if: ${{always()}}
    runs-on: ubuntu-latest
    needs: [ build-and-test, analyze ]
    permissions:
      actions: write
    
    steps:
    - name: Remove Outdated Caches
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        #curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches?key=cmu-build-$GITHUB_WORKFLOW-$GITHUB_RUN_NUMBER"
