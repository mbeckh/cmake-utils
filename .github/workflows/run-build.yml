name: Build

on:
  workflow_call:
    inputs:
      source-dir:
        description: The CMake source directory (optional, defaults to working directory).
        type: string
        default: .
      unity:
        description: Use unity build in CMake (optional, defaults to true).
        type: boolean
        default: true
      pch:
        description: Use precompiled headers (optional, defaults to true).
        type: boolean
        default: true
      configure-args:
        description: Extra arguments for CMake configure (optional).
        type: string
      build-args:
        description: Extra arguments for CMake build (optional).
        type: string
      test-args:
        description: Extra arguments for CTest (optional).
        type: string
    secrets:
      CODACY_PROJECT_API_TOKEN:
        required: true

permissions: {}

concurrency: 
  group: run-build-${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  configure:
    name: Configure
    if: 1 == 2
    outputs:
      tools-cache-key: ${{steps.tools-restore.outputs.cache-primary-key}}
      vcpkg-cache-key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
      packages: write

    steps:
    # Actions: Load
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Actions: Load'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl -L --no-progress-meter -o "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             "$GITHUB_API_URL/repos/mbeckh/cmake-utils/tarball/$GITHUB_WORKFLOW_SHA"
        mkdir cmake-utils
        tar -x -v -f "cmake-utils-$GITHUB_WORKFLOW_SHA.tar.gz" -C cmake-utils \
            --strip-components=1 --show-transformed-names --exclude='*.md' --wildcards \
            '*/configure' '*/modules' '*/msvc-dev-env' '*/Toolchain.cmake' \

    - name: 'Actions: Cache'
      if: ${{steps.actions-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: cmake-utils
        key: ${{steps.actions-restore.outputs.cache-primary-key}}

    # Source: Load
    - name: 'Source: Restore'
      id: source-restore
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.ref}}-${{github.sha}}
        restore-keys: |
          cmu-source-${{github.ref}}-
          cmu-source-

    - name: 'Source: Checkout'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/checkout@v3
      with:
        path: source
        persist-credentials: false

    - name: 'Source: Remove Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true' && startsWith(steps.source-restore.outputs.cache-matched-key, format('cmu-source-{0}-', github.ref))}}
      shell: bash
      env:
        SOURCE_CACHE_KEY: ${{steps.project-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$SOURCE_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'Source: Cache'
      if: ${{steps.source-restore.outputs.cache-hit != 'true'}}
      uses: actions/cache/save@v3
      with:
        path: source
        key: ${{steps.source-restore.outputs.cache-primary-key}}

    # Build Directory: Load
    - name: 'Build Directory: Restore'
      # For re-runs only
      id: build-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: cmu-build-${{github.workflow}}-${{github.event_name}}-${{github.run_number}}-${{github.workflow_sha}}
        restore-keys: cmu-build-${{github.workflow}}-${{github.event_name}}-${{github.run_number}}-

    # Build Environment: Load
    - name: Image Version
      id: image
      shell: cmd
      run: ((echo os=%ImageOs%) & (echo version=%ImageVersion%)) >> %GITHUB_OUTPUT%

    - name: 'Tools: Restore'
      id: tools-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: cmu-tools-${{steps.image.outputs.os}}-${{steps.image.outputs.version}}

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: >
          cmu-vcpkg_installed-${{hashFiles(
            format('source{0}{1}/vcpkg.json',
              inputs.source-dir != '.' && inputs.source-dir && '/' || '',
              inputs.source-dir != '.' && inputs.source-dir || ''
            ),
            format('source{0}{1}/vcpkg-configuration.json',
              inputs.source-dir != '.' && inputs.source-dir && '/' || '',
              inputs.source-dir != '.' && inputs.source-dir || ''
            ))}}
        restore-keys: cmu-vcpkg_installed-

    - name: 'MSVC Environment: Restore'
      id: tools-state
      shell: bash
      run: |
        echo "vcpkg-hash=${{hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}" >> $GITHUB_OUTPUT
        > cmake-utils/.tools.stamp
        if [[ -f cmake-utils/.msvc.env ]]; then
          cat cmake-utils/.msvc.env >> $GITHUB_ENV 
          echo "msvc-restored=true" >> $GITHUB_OUTPUT
        fi

    - name: 'MSVC Environment: Setup'
      id: msvc-setup
      if: ${{steps.tools-state.outputs.msvc-restored != 'true'}}
      uses: ./cmake-utils/msvc-dev-env
      with:
        env-file: cmake-utils/.msvc.env

    # Configure
    - name: Configure
      id: configure
      uses: ./cmake-utils/configure
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}
        binary-dir: build
        generator: Ninja Multi-Config
        extra-args: ${{inputs.unity && '-D "CMAKE_UNITY_BUILD:BOOL=ON"' || ''}} ${{!inputs.pch && '-D "CMAKE_DISABLE_PRECOMPILE_HEADERS:BOOL=ON"' || ''}} ${{inputs.configure-args}}

    # Build Environment: Cache
    - name: 'Tools: Check for Updates'
      id: tools-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.tools-restore.outputs.cache-matched-key != ''}}
      shell: bash
      env:
        TOOLS_CACHE_KEY: ${{steps.tools-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        if [[ cmake-utils/.msvc.env -nt cmake-utils/.tools.stamp \
              || -d vcpkg-downloads/tools \
                 && $(find vcpkg-downloads/tools -maxdepth 1 -type d -name 'powershell-core-*' -newer cmake-utils/.tools.stamp -printf "1" -quit) == 1 ]]; then
          curl --get -X DELETE --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data-urlencode "key=$TOOLS_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
               "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: 'Tools: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.tools-restore.outputs.cache-hit != 'true' || steps.tools-check.outputs.updated == 'true')}}
      uses: actions/cache/save@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{steps.tools-restore.outputs.cache-primary-key}}

    - name: 'vcpkg Packages: Check for Updates'
      id: vcpkg-check
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.vcpkg-restore.outputs.cache-hit == 'true' && steps.tools-state.outputs.vcpkg-hash != hashFiles('build/vcpkg_installed/*/share/*/vcpkg_abi_info.txt')}}
      shell: bash
      env:
        VCPKG_CACHE_KEY: ${{steps.vcpkg-restore.outputs.cache-primary-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        echo "### Updated vcpkg Dependencies" >> $GITHUB_STEP_SUMMARY
        find build/vcpkg_installed -newer cmake-utils/.tools.stamp -printf '%P\n' >> $GITHUB_STEP_SUMMARY
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
             --data-urlencode "key=$VCPKG_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
             "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'vcpkg Packages: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && (steps.vcpkg-restore.outputs.cache-hit != 'true' || steps.vcpkg-check.outcome == 'success')}}
      uses: actions/cache/save@v3
      with:
        path: build/vcpkg_installed
        key: ${{steps.vcpkg-restore.outputs.cache-primary-key}}

    # Build Directory: Cache
    - name: 'Build Directory: Remove Cache'
      if: ${{always() && steps.configure.outcome != 'skipped' && steps.build-restore.outputs.cache-matched-key != ''}}
      shell: bash
      env:
        BUILD_CACHE_KEY: ${{steps.build-restore.outputs.cache-matched-key}}
        GITHUB_TOKEN: ${{github.token}}
      run: |
        curl --get -X DELETE --no-progress-meter \
             -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
            --data-urlencode "key=$BUILD_CACHE_KEY" --data-urlencode "ref=$GITHUB_REF" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

    - name: 'Build Directory: Cache'
      if: ${{always() && steps.configure.outcome != 'skipped'}}
      uses: actions/cache/save@v3
      with:
        path: |
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: ${{steps.build-restore.outputs.cache-primary-key}}

    # Logs
    - name: Save vcpkg Logs
      if: ${{always() && steps.configure.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: vcpkg-Logs
        path: |
          build/vcpkg-buildtrees/*/*.log
          !build/vcpkg-buildtrees/detect_compiler/**
        if-no-files-found: ignore

  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    # Restore
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Source: Restore'
      id: source-restore
      if: ${{steps.actions-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.ref}}-${{github.sha}}

    - name: 'Build Directory: Restore'
      id: build-restore
      if: ${{steps.source-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: |
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: cmu-build-${{github.workflow}}-${{github.event_name}}-${{github.run_number}}-${{github.workflow_sha}}

    - name: 'Tools: Restore'
      id: tools-restore
      if: ${{steps.build-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{needs.configure.outputs.tools-cache-key}}

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      if: ${{steps.tools-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: ${{needs.configure.outputs.vcpkg-cache-key}}

    - name: Fail on Cache Errors
      if: ${{steps.vcpkg-restore.outputs.cache-hit != 'true'}}
      run: exit 1

    - name: 'MSVC Environment: Restore'
      shell: bash
      run: |
        cmake-utils/.msvc.env >> $GITHUB_ENV

    # Build and Test
    - name: Build
      shell: cmd
      working-directory: build
      env:
        INPUT_BUILD_ARGS: ${{inputs.build-args}}
      run: cmake --build . --config ${{matrix.configuration}} %INPUT_BUILD_ARGS%

    - name: Test
      id: test
      if: matrix.configuration != 'Debug'
      shell: cmd
      working-directory: build
      env:
        INPUT_TEST_ARGS: ${{inputs.test-args}}
      run: ctest --output-on-failure -C ${{matrix.configuration}} %INPUT_TEST_ARGS%

    - name: Coverage
      id: coverage
      if: matrix.configuration == 'Debug'
      uses: mbeckh/code-quality-actions/coverage@v1
      with:
        source-dir: ${{format('source{0}{1}', inputs.source-dir != '.' && inputs.source-dir && '/' || '', inputs.source-dir != '.' && inputs.source-dir || '')}}
        binary-dir: build
        command: ctest --output-on-failure -C ${{matrix.configuration}} ${{inputs.test-args}}
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Codecov
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        files: build/coverage-*.xml
        fail_ci_if_error: true

    # Logs
    - name: Save Test Logs
      if: ${{always() && (steps.test.outcome != 'skipped' || steps.coverage.outcome != 'skipped')}}
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Test-Logs
        path: build/Testing/**/*.log
        if-no-files-found: ignore

  analyze:
    name: Analyze
    runs-on: windows-latest
    needs: configure
    strategy:
      matrix:
        configuration: [ Debug, Release ]
    permissions:
      actions: read

    steps:
    # Restore
    - name: 'Actions: Restore'
      id: actions-restore
      uses: actions/cache/restore@v3
      with:
        path: cmake-utils
        key: cmu-cmake-utils-${{github.workflow_sha}}

    - name: 'Source: Restore'
      id: source-restore
      if: ${{steps.actions-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: source
        key: cmu-source-${{github.ref}}-${{github.sha}}

    - name: 'Build Directory: Restore'
      id: build-restore
      if: ${{steps.source-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: |
          build/*
          !build/vcpkg_installed
          !build/vcpkg-buildtrees
          !build/vcpkg-packages
        key: cmu-build-${{github.workflow}}-${{github.event_name}}-${{github.run_number}}-${{github.workflow_sha}}

    - name: 'Tools: Restore'
      id: tools-restore
      if: ${{steps.build-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: |
          cmake-utils/.msvc.env
          vcpkg-downloads/tools/powershell-core-*
        key: ${{needs.configure.outputs.tools-cache-key}}

    - name: 'vcpkg Packages: Restore'
      id: vcpkg-restore
      if: ${{steps.tools-restore.outputs.cache-hit == 'true'}}
      uses: actions/cache/restore@v3
      with:
        path: build/vcpkg_installed
        key: ${{needs.configure.outputs.vcpkg-cache-key}}

    - name: Fail on Cache Errors
      if: ${{steps.vcpkg-restore.outputs.cache-hit != 'true'}}
      run: exit 1

    - name: 'MSVC Environment: Restore'
      shell: bash
      run: |
        cmake-utils/.msvc.env >> $GITHUB_ENV

    # Analyze
    - name: Analyze
      id: analyze
      shell: cmd
      working-directory: build
      run: cmake --build . --config ${{matrix.configuration}} --target clang-tidy

    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: partial
        binary-dir: build
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

    - name: Save Analyze Logs
      if: ${{always() && steps.analyze.outcome != 'skipped'}}
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.configuration}}-Analyze-Logs
        path: build/${{matrix.configuration}}/clang-tidy-*.log
        if-no-files-found: ignore

  completion:
    name: Send Completion Message
    runs-on: ubuntu-latest
    needs: analyze

    steps:
    - name: Report
      uses: mbeckh/code-quality-actions/report@v1
      with:
        mode: final
        codacy-token: ${{secrets.CODACY_PROJECT_API_TOKEN}}

  cleanup:
    name: Clean Caches
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: 'Deleted Branches: Remove Caches'
      shell: bash
      env:
        GITHUB_TOKEN: ${{github.token}}
      run: |
        function load_paged {
          curl -D "$1.headers" --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               -o "$1" "$2"
          next=$(egrep -i '^link: ' "$1.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")')
          while [[ -n $next ]]; do
            curl -a -D "$1.headers" --no-progress-meter \
                 -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                 -o "$1" "$next"
            next=$(egrep -i '^link: ' "$1.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")')
          done
        }
        echo 1

        stamp=$(jq -n -r 'now')
        echo 2
        load_paged branches.json "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/matching-refs/heads"
        echo 3
        jq -r '.[] | .ref | @json' branches.json > branch-names.json
        echo 4

        load_paged pulls.json "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls?state=open"
        #jq -r '.[] | .ref | @json' pulls.json > branch-names.json

        load_paged caches.json "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"

        if [[ 1 == 1 || $RUNNER_DEBUG -eq 1 ]]; then
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/matching-refs/heads"
            cat branches.json
            echo "::endgroup::"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY//pulls?state=open"
            cat pulls.json
            echo "::endgroup::"
            echo "::group::$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches"
            cat caches.json
            echo "::endgroup::"
            echo "::group::Active Branches"
            cat branch-names.json
            echo "::endgroup::"
        fi

        jq -r --slurpfile branches branch-names.json --argjson stamp "$stamp" '.actions_caches | map(select(.ref | IN($branches[]) | not)) | map(.last_accessed_at |= (sub(".\\d+Z$"; "Z") | fromdateiso8601)) | map(select(.last_accessed_at <= $stamp )) | to_entries[] | [ .key, .value.id, .value.key, .value.ref, (.value.last_accessed_at | gmtime | strftime("%Y-%m-%d %H:%M:%S")) ] | @tsv' caches.json \
          | while IFS=$'\t' read sequence cache_id cache_key cache_ref cache_last_accessed; do
              if [[ -n $sequence ]]; then
                if [[ $sequence -eq 0 ]]; then
                  echo "## Clean Caches" >> $GITHUB_STEP_SUMMARY
                  echo "| Branch | Key | Last Accessed At |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                fi
                echo "Removing cache $cache_key of $cache_ref (last access: $cache_last_accessed)"
                echo "| $cache_ref | $cache_key | $cache_last_accessed |" >> $GITHUB_STEP_SUMMARY
                #curl -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" --no-progress-meter "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/caches/${cache_id}"
              fi
            done
